package com.aladdin.demobooksite.dao.repository;

import com.aladdin.demobooksite.dao.entity.Book;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Repository
public interface BookRepository extends JpaRepository<Book, Integer> {


    int deleteByAuthor(String author);

    int deleteByTitle(String title);

    @Transactional
//    @Modifying
//    @Query("DELETE FROM Book b WHERE b.price<:price")
//    @AfterReturning
//    int deleteByPriceLessThan(@Param("price") double price);

    int deleteByPriceLessThan(double price);

//    @Transactional
//    @Modifying
//    @Query("DELETE FROM Book b WHERE b.inStock=false")
//    int deleteByInQuantity();

    int deleteByInStockFalse();

    @Modifying
    @Query(value = "ALTER TABLE books AUTO_INCREMENT = 1", nativeQuery = true)
    void resetAutoIncrement();


//    @Query("SELECT b FROM Book b WHERE " +
//            "(:author IS NULL OR LOWER(b.author)=LOWER(:author)) AND " +
//            "(:title IS NULL OR LOWER(b.title)=LOWER(:title))")
//    List<Book> findBookByAuthorAndTitle(@Param("author") String author, @Param("title") String title);


        List<Book> find

    @Query("SELECT b FROM Book b WHERE " +
            "b.price>= COALESCE(:minPrice,0) and " +
            "b.price<= COALESCE(:maxPrice,999999999) ")
    List<Book> filterBookByPrice(@Param("minPrice") Double minPrice, @Param("maxPrice") Double maxPrice);

    @Query("SELECT b FROM Book b WHERE b.inStock=:stock")
    List<Book> stockCheckFilter(@Param("stock") boolean stock);

    @Query("SELECT b FROM Book b WHERE b.genre=:genre")
    List<Book> filterBookByGenre(@Param("genre") String genre);

    @Transactional
    @Modifying
    @Query("UPDATE Book b SET b.quantity=:quantity WHERE b.id=:id")
    int updateBookQuantity(@Param("id") Integer id, @Param("quantity") int quantity);

    @Transactional
    @Modifying
    @Query("UPDATE Book b SET b.price=:newPrice WHERE b.price<=:checkPrice")
    int updateCustomBooksPrice(@Param("checkPrice") double checkPrice,
                               @Param("newPrice") double newPrice);
}

================================================================================================
package com.aladdin.demobooksite.dao.repository;

import com.aladdin.demobooksite.dao.entity.Client;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

public interface ClientRepository extends JpaRepository<Client, Integer> {

    @Query("SELECT c FROM Client c WHERE " +
            "(:firstName IS NULL OR LOWER(c.first_name)=LOWER(:firstName)) AND " +
            "(:lastName IS NULL OR LOWER(c.last_name)=LOWER(:lastName) )")
    List<Client> findClientByLastNameOrFirstName(@Param("firstName") String firstName,
                                                 @Param("lastName") String lastName);

    @Modifying
    @Query("DELETE FROM Client c WHERE c.first_name=:firstName")
    int deleteClientByFirstName(@Param("firstName") String firstName);

    int deleteByFirst_name(String firstName);

    @Modifying
    @Query("DELETE FROM Client c WHERE c.last_name=:lastName")
    int deleteClientByLastName(@Param("LastName") String lastName);

    @Transactional
    @Modifying
    @Query("DELETE FROM Client c WHERE c.age>=:minAge and c.age<=:maxAge")
    int deleteClientByAgeRange(@Param("minAge") int minAge, @Param("maxAge") int maxAge);

    @Modifying
    @Query(value = "ALTER TABLE client AUTO_INCREMENT = 1", nativeQuery = true)
    void resetAutoIncrement();


}

